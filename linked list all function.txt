#include <stdio.h>
#include <stdlib.h>

typedef struct node { 
    int data; 
    struct node *next; 
} node;

node* create(int n); 
void print(node *p); 
void count(node *p); 
void search(node *p); 

node* insert_at_Begin(node *head); 
node* insert_at_Middle(node *head); 
node* insert_at_End(node *head); 

node* delete_at_Begin(node *head); 
node* delete_at_Middle(node *head); 
node* delete_at_End(node *head); 

int main() { 
    node *Head; 
    int no, op; 
    
    Head = NULL;
    
    do { 
        printf("\n************SLL OPERATIONS*************"); 
        printf("\n1.Create\n2.Print\n3.Count\n4.Search"); 
        printf("\n5.Insert at Begin\n6.Insert at Middle\n7.Insert at End"); 
        printf("\n8.Delete from Begin\n9.Delete from Middle\n10.Delete from End\n11.Exit"); 
        printf("\nEnter your choice:"); 
        scanf("%d", &op); 
        switch(op) { 
            case 1: 
                printf("\nEnter size of linked list:"); 
                scanf("%d", &no); 
                Head = create(no); 
                break; 
            case 2: 
                print(Head);  
                break; 
            case 3: 
                count(Head); 
                break; 
            case 4: 
                search(Head); 
                break; 
            case 5: 
                Head = insert_at_Begin(Head); 
                break; 
            case 6: 
                Head = insert_at_Middle(Head); 
                break; 
            case 7: 
                Head = insert_at_End(Head); 
                break; 
            case 8: 
                Head = delete_at_Begin(Head); 
                break; 
            case 9: 
                Head = delete_at_Middle(Head); 
                break; 
            case 10: 
                Head = delete_at_End(Head); 
                break; 
            case 11: 
                printf("\nGood Bye..Thanks for using our Application!!!"); 
                break; 
            default: 
                printf("\nPlease select valid option!!!"); 
        } 
    } while(op != 11); 
    return 0;
} 

node* create(int n) { 
    node *head, *p; 
    int i, x;  
    printf("\nEnter data:"); 
    scanf("%d", &x); 

    head = (node*)malloc(sizeof(node)); 
    head->data = x; 
    head->next = NULL; 
    p = head; 

    for(i = 2; i <= n; i++) { 
        printf("\nEnter data:"); 
        scanf("%d", &x); 
        p->next = (node*)malloc(sizeof(node)); 
        p = p->next; 
        p->data = x; 
        p->next = NULL; 
    } 
    printf("\nLinked list created successfully!"); 
    return head; 
} 

void print(node *p) { 
    printf("\nSLL Nodes: "); 
    while(p != NULL) { 
        printf("%d -> ", p->data); 
        p = p->next; 
    } 
    printf("NULL\n");
} 

void count(node *p) { 
    int count = 0; 
    while(p != NULL) { 
        count++; 
        p = p->next; 
    } 
    printf("\nNo of Nodes: %d", count); 
} 

void search(node *p) { 
    int key, flag = 0; 
    printf("\nEnter key element to be searched: "); 
    scanf("%d", &key); 
    while(p != NULL) { 
        if(key == p->data) { 
            flag = 1; 
            break; 
        } 
        p = p->next; 
    } 
    if(flag == 1) 
        printf("\nElement found!"); 
    else 
        printf("\nElement not found!"); 
} 

node* insert_at_Begin(node *head) { 
    node *q; 
    int x; 
    printf("\nEnter data:"); 
    scanf("%d", &x); 
    q = (node*)malloc(sizeof(node)); 
    q->data = x; 
    q->next = head; 
    head = q; 
    printf("\nNode inserted at the beginning successfully!"); 
    return head; 
} 

node* insert_at_End(node *head) { 
    node *q, *p; 
    int x; 
    printf("\nEnter data:"); 
    scanf("%d", &x); 
    q = (node*)malloc(sizeof(node)); 
    q->data = x; 
    q->next = NULL; 

    if(head == NULL) { 
        head = q; 
    } else { 
        p = head; 
        while(p->next != NULL) { 
            p = p->next; 
        } 
        p->next = q; 
    } 
    printf("\nNode inserted at the end successfully!"); 
    return head; 
} 

node* insert_at_Middle(node *head) { 
    node *q, *p; 
    int x, loc, i; 
    if(head == NULL) { 
        printf("\nLinked list is empty! Cannot insert in the middle!"); 
        return head; 
    } else { 
        printf("\nEnter data:"); 
        scanf("%d", &x); 
        q = (node*)malloc(sizeof(node)); 
        q->data = x; 
        q->next = NULL; 
        printf("\nEnter location for insertion:"); 
        scanf("%d", &loc); 
        p = head; 
        for(i = 1; i < loc - 1; i++) { 
            p = p->next; 
        } 
        q->next = p->next; 
        p->next = q; 
        printf("\nNode inserted in the middle successfully!"); 
        return head; 
    } 
}

node* delete_at_Begin(node *head) { 
    node *q; 
    if(head == NULL) { 
        printf("\nLinked list is empty! Cannot delete from the beginning!"); 
        return head; 
    } else { 
        q = head; 
        head = head->next; 
        free(q); 
        printf("\nNode deleted from the beginning successfully!"); 
        return head; 
    } 
} 

node* delete_at_End(node *head) { 
    node *q, *p; 
    if(head == NULL) { 
        printf("\nLinked list is empty! Cannot delete from the end!"); 
        return head; 
    } else { 
        p = head; 
        while(p->next->next != NULL) { 
            p = p->next; 
        } 
        q = p->next; 
        p->next = NULL; 
        free(q); 
        printf("\nNode deleted from the end successfully!"); 
        return head; 
    } 
}

node* delete_at_Middle(node *head) { 
    node *q, *p; 
    int loc, i; 
    if(head == NULL) { 
        printf("\nLinked list is empty! Cannot delete from the middle!"); 
        return head; 
    } else { 
        printf("\nEnter location of node for deletion:"); 
        scanf("%d", &loc); 
        p = head; 
        for(i = 1; i < loc - 1; i++) { 
            p = p->next; 
        } 
        q = p->next; 
        p->next = q->next; 
        free(q); 
        printf("\nNode deleted from the middle successfully!"); 
        return head; 
    } 
} 
            
                                   