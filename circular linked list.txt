#include <stdio.h>
#include <stdlib.h>

typedef struct node {
    int data;
    struct node *next;
} node;

node* create(int n) {
    node *head = NULL, *temp, *p;
    int x, i;
    for (i = 1; i <= n; i++) {
        printf("Enter data: ");
        scanf("%d", &x);
        temp = (node*)malloc(sizeof(node));
        temp->data = x;
        if (head == NULL) {
            head = temp;
            temp->next = head;
        } else {
            p = head;
            while (p->next != head)
                p = p->next;
            p->next = temp;
            temp->next = head;
        }
    }
    return head;
}

void traverse(node *head) {
    node *temp = head;
    if (head != NULL) {
        do {
            printf("%d -> ", temp->data);
            temp = temp->next;
        } while (temp != head);
        printf("Circular Link\n");
    }
}

node* insert_at_begin(node *head) {
    node *temp;
    int x;
    printf("Enter data: ");
    scanf("%d", &x);
    temp = (node*)malloc(sizeof(node));
    temp->data = x;
    if (head == NULL) {
        head = temp;
        temp->next = head;
    } else {
        node *p = head;
        while (p->next != head)
            p = p->next;
        p->next = temp;
        temp->next = head;
        head = temp;
    }
    return head;
}

node* insert_at_end(node *head) {
    node *temp, *p;
    int x;
    printf("Enter data: ");
    scanf("%d", &x);
    temp = (node*)malloc(sizeof(node));
    temp->data = x;
    if (head == NULL) {
        head = temp;
        temp->next = head;
    } else {
        p = head;
        while (p->next != head)
            p = p->next;
        p->next = temp;
        temp->next = head;
    }
    return head;
}

node* delete_at_begin(node *head) {
    if (head == NULL) {
        printf("List is empty\n");
        return head;
    }
    node *temp = head;
    node *p = head;
    while (p->next != head)
        p = p->next;
    if (head->next == head) {
        free(head);
        head = NULL;
    } else {
        p->next = head->next;
        head = head->next;
        free(temp);
    }
    return head;
}

node* delete_at_end(node *head) {
    if (head == NULL) {
        printf("List is empty\n");
        return head;
    }
    node *temp = head, *p = head;
    while (p->next != head)
        p = p->next;
    if (head->next == head) {
        free(head);
        head = NULL;
    } else {
        while (temp->next != p)
            temp = temp->next;
        temp->next = head;
        free(p);
    }
    return head;
}

int main() {
    node *head = NULL;
    int n, choice;

    printf("Enter number of nodes: ");
    scanf("%d", &n);
    head = create(n);

    do {
        printf("\n1. Traverse\n2. Insert at beginning\n3. Insert at end\n4. Delete from beginning\n5. Delete from end\n6. Exit\nEnter choice: ");
        scanf("%d", &choice);
        switch (choice) {
            case 1:
                traverse(head);
                break;
            case 2:
                head = insert_at_begin(head);
                break;
            case 3:
                head = insert_at_end(head);
                break;
            case 4:
                head = delete_at_begin(head);
                break;
            case 5:
                head = delete_at_end(head);
                break;
            case 6:
                printf("Exiting...\n");
                break;
            default:
                printf("Invalid choice\n");
        }
    } while (choice != 6);

    return 0;
}